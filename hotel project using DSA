#include <iostream>
#include <fstream>
#include <conio.h>

using namespace std;
    class node
    {
    	public:
        int id, date;
        string name, roomtype;
        node *next;
        public:
        	node():next(NULL)
        	{   }
    };
class Hotel
{
public:
    node *head;
    Hotel():head(NULL)
    {   };
    void insert();
    void menu();
    void update();
    void search();
    void Delete();
    void sort();
    void show();
    void searchByName();
    void searchByDate();
};

void Hotel::menu()
{
    int choice;
    do
    {
        cout << "\n\tWelcome To Hotel Management System Application\n"
             << endl;
        cout << "\n\t...............Hotel Management System................";
        cout << "\n\nS.No          Functions              Descriptions" << endl;
        cout << "\n1\tAllocate Room\t\t\tInsert New Room";
        cout << "\n2\tSearch Room\t\t\tSearch Room with Room ID";
        cout << "\n3\tUpdate Room\t\t\tUpdate Room Record";
        cout << "\n4\tDelete Room\t\t\tDelete Room with Room ID";
        cout << "\n5\tShow Room Records\t\tShow Room Records that(we added)";
        cout << "\n6\tSearch Room\t\t\tSearch Room with Customer Name";
        cout << "\n7\tSearch Room\t\t\tSearch Room with Date";
        cout << "\n8\tExit" << endl;

        cout << "Enter your choice" << endl;
        cin >> choice;

        switch (choice)
        {
        case 1:
            insert();
            break;
        case 2:
            search();
            break;
        case 3:
            update();
            break;
        case 4:
            Delete();
            break;
        case 5:
            system("cls");
            sort();
            show(); // Call show() after sorting
            break;
        case 6:
            searchByName();
            break;
        case 7:
            searchByDate();
            break;
        case 8:
            exit(0);
        default:
            cout << "Invalid";
        }

    } while (choice != 8);
}
void Hotel::insert()
{
    cout << "\n\t...............Hotel Management System................";
    node *temp = new node;
    cout << "\nEnter Room ID :" << endl;
    cin >> temp->id;
    cout << "Enter Customer name :" << endl;
    cin >> temp->name;
    cout << "Enter Allocated Date :" << endl;
    cin >> temp->date;
    cout << "Enter Room Type(single/double/twin) :" << endl;
    cin >> temp->roomtype;

    temp->next = NULL;  // Ensure the new node points to nullptr

    if (head == NULL)
    {
        head = temp;
    }
    else
    {
        node *ptr = head;
        while (ptr->next != NULL)
        {
            ptr = ptr->next;
        }
        ptr->next = temp;
    }
    cout << "\n\n\t\tNew Room Inserted";
    getch();
}


void Hotel::search()
{
    cout << "\n\t...............Hotel Management System................";
    int t_id;
    if (head == NULL)
    {
        cout << "\n\nLinked list is Empty";
    }
    else
    {
        cout << "\n\nRoom ID";
        cin >> t_id;
        node *ptr = head;
        while (ptr != NULL)
        {
            if (t_id == ptr->id)
            {
                cout << "\n\nRoom ID :" << ptr->id;
                cout << "\n\nCustomer Name :" << ptr->name;
                cout << "\n\nRoom Allocated Date :" << ptr->date;
                cout << "\n\nRoom Type :" << ptr->roomtype;
            }
            ptr = ptr->next;
        }
    }
    getch();
}

void Hotel::searchByName() {
    cout << "\n\t...............Hotel Management System................";
    string t_name;
    if (head == NULL) {
        cout << "\n\nLinked list is Empty";
    } else {
        cout << "\n\nEnter Customer Name to Search: ";
        cin.ignore(); // Ignore newline character in buffer
        getline(cin, t_name);
        node *ptr = head;
        bool found = false;
        while (ptr != NULL) {
            if (t_name == ptr->name) {
                cout << "\n\nRoom ID: " << ptr->id;
                cout << "\n\nCustomer Name: " << ptr->name;
                cout << "\n\nRoom Allocated Date: " << ptr->date;
                cout << "\n\nRoom Type: " << ptr->roomtype;
                found = true;
            }
            ptr = ptr->next;
        }
        if (!found) {
            cout << "\n\nRoom with Customer Name '" << t_name << "' not found.";
        }
    }
    getch();
}

void Hotel::searchByDate() {
    cout << "\n\t...............Hotel Management System................";
    int t_date;
    if (head == NULL) {
        cout << "\n\nLinked list is Empty";
    } else {
        cout << "\n\nEnter Allocated Date to Search: ";
        cin >> t_date;
        node *ptr = head;
        bool found = false;
        while (ptr != NULL) {
            if (t_date == ptr->date) {
                cout << "\n\nRoom ID: " << ptr->id;
                cout << "\n\nCustomer Name: " << ptr->name;
                cout << "\n\nRoom Allocated Date: " << ptr->date;
                cout << "\n\nRoom Type: " << ptr->roomtype;
                found = true;
            }
            ptr = ptr->next;
        }
        if (!found) {
            cout << "\n\nRoom with Allocated Date '" << t_date << "' not found.";
        }
    }
    getch();
}

void Hotel::update()
{
    cout << "\n\t...............Hotel Management System................";
    int t_id;
    if (head == NULL)
    {
        cout << "\n\nLinked list is Empty";
    }
    else
    {
        cout << "\n\nRoom ID to Update";
        cin >> t_id;
        node *ptr = head;
        while (ptr != NULL)
        {
            if (t_id == ptr->id)
            {
                cout << "\n\nRoom ID: " << ptr->id;
                cout << "\n\nCustomer Name: " << ptr->name;
                cout << "\n\nRoom Allocated Date: " << ptr->date;
                cout << "\n\nRoom Type: " << ptr->roomtype;

                // Now take input for update
                cout << "\nEnter New Customer Name: ";
                cin >> ptr->name;
                cout << "\nEnter New Allocated Date: ";
                cin >> ptr->date;
                cout << "\nEnter New Room Type: ";
                cin >> ptr->roomtype;

                cout << "\n\n\t\tUpdate Record Successfully";
                break;
            }
            ptr = ptr->next;
        }
    }
    getch();
}

void Hotel::Delete()
{
    cout << "\n\t...............Hotel Management System................";
    int t_id;
    if (head == NULL)
    {
        cout << "\n\nLinked list is Empty";
    }
    else
    {
        cout << "\n\nRoom ID";
        cin >> t_id;
        if (t_id == head->id)
        {
            node *ptr = head;
            head = head->next;
            delete ptr;
            cout << "Delete Room Record Successfully\n";
        }
        else
        {
            node *pre = head;
            node *ptr = head;
            while (ptr != NULL)
            {
                if (t_id == ptr->id)
                {
                    pre->next = ptr->next;
                    delete ptr;
                    cout << "Delete Room Record Successfully\n";
                    break;
                }
                pre = ptr;
                ptr = ptr->next;
            }
        }
    }
    getch();
}

void Hotel::show()
{
    node *ptr = head;

    if (ptr == NULL)
    {
        cout << "\n\nNo Records Found\n";
    }
    else
    {
        cout << "\n\nRoom Records:\n";
        ofstream outputFile("E:outputfile.txt", ios::out | ios::app);
        while (ptr != NULL)
        {
            cout << "\n\nRoom ID: " << ptr->id;
            cout << "\nCustomer Name: " << ptr->name;
            cout << "\nRoom Allocated Date: " << ptr->date;
            cout << "\nRoom Type: " << ptr->roomtype;
            // Write the data to the file
            outputFile << "Room ID = " << ptr->id << "\t" << "Customer Name = " << ptr->name << "\t" << "Allocated Date = " << ptr->date << "\n";
            ptr = ptr->next;
        }
         // Close the file
        outputFile.close();
    }
    getch();
}

void Hotel::sort()
{
    cout << "\n\t...............Hotel Management System................";
    if (head == NULL)
    {
        cout << "\n\nLinked list is Empty";
    }
    else
    {
        int count = 0;
        int t_date, t_id;
        string t_name, t_roomtype;
        node *ptr = head;

        while (ptr != NULL)
        {
            count++;
            ptr = ptr->next;
        }

        for (int i = 1; i < count; i++)
        {
            node *ptr = head;
            for (int j = 1; j < count; j++)
            {
                if (ptr->id > ptr->next->id)
                {
                    t_id = ptr->id;
                    t_name = ptr->name;
                    t_date = ptr->date;
                    t_roomtype = ptr->roomtype;

                    ptr->id = ptr->next->id;
                    ptr->name = ptr->next->name;
                    ptr->date = ptr->next->date;
                    ptr->roomtype = ptr->next->roomtype;

                    ptr->next->id = t_id;
                    ptr->next->date = t_date;
                    ptr->next->name = t_name;
                    ptr->next->roomtype = t_roomtype;
                }
                ptr = ptr->next;
            }
        }
    }
    // getch();  // Remove this getch() call
}
int main()
{
    Hotel h1;
    h1.menu();
    return 0;
}
